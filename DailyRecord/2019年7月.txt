@@Day("2019年7月4日")

@@Date("2019年7月4日16:43:54")
@@Topic("POI")
@@Keywords("java,POI,HSSF,XSSF,SXSSF")
@@Description:
  HSSF:Excel 97-2003,扩展名为.xls,一个sheet最大行数为65536,最大列数为256;
  XSSF:Excel 2007及以上,扩展名为.xlsx,一个sheet最大行数为1048576.最大列数为16384;
  SXSSF:在XSSF基础上,POI3.8提供的支持低内存占用的操作方式,扩展名为.xlsx
      SXSSF中,可以在构造方法中,指定缓存的行数,如果每一行数据较小,可以设置为1024*8,
      如果较大,可以设置为1024;


@@Day("2019年7月7日")

@@Date("2019年7月7日10:43:31")
@@Topic("canvas")
@@Keywords("js,canvas")
@@Descriptions:
  注:以下内容基于canvas.getContext('2d')所得到的canvas上下文
  A.颜色与阴影相关属性(可以设置和得到):
    fillStyle:color|gradient|pattern(默认为'#000000')
      // 规定使用何种方式填充某个闭合空间
      注: color可以是一个#+rgb的字符串,如'#0000ff'代表蓝色
        gradient代表线性或者放射性的渐变,通过createLinearGradient()方法创建(gradient:变化率)
        pattern通过createPattern()方法得到,一般是使用某张图片来填充画布
    stockStyle:
      // 规定使用何种方式来绘制某个边框
      // 设置方式同上,默认值同上
    shadowColor:color
      // 规定阴影的颜色
    shadowBlur:n
      // 规定阴影的模糊级别
    shadowOffsetX/shadowOffsetY:n(代表像素值),默认0
      // 规定阴影的偏移,为0则代表阴影位于形状的正下方
  B.颜色与阴影相关方法:
    createLinearGradient(x0,y0,x1,y1);
      // x0,y0代表渐变开始点坐标,x1,y1代表渐变结束点的坐标;
      // 通常利用该方法的返回值调用addColorStop()来指定颜色
      // 然后以该返回值作为参数赋值给fillStyle
    createPattenr(image,"repeat|repeat-x|repeat-y|no-repeat");
      // image可以是图片,视频或者其他canvas
      // 被重复的元素可用于绘制/填充矩形,圆形,线条等
    creteRadialGradient(x0,y0,r0,x1,y1,r1);
      // 其中的参数用于指定开始圆和结束圆的位置
    addColorStop(stop,color);
      // stop介于0和1之间,用于指定渐变开始和结束之间的位置
      // color用于指定在结束位置显示的颜色
      // 该方法与creatLinearGradient和createRadialGradient一起使用,以创建色标
    C.线条样式:
      lineCap:"butt|round|square"
        // 为某个线条添加线帽,square为矩形线帽,会表butt稍长
      lineJoin:"bevel|round|milter"
        // 当两条线相交时,规定创建边角的类型
        // bevel:斜角(相交处为直线),milter:尖角(相交处为点),round:圆角
      lineWidth:n(像素)
        // 设置线条宽度
      milterLimit:最大斜接长度,如果超过这个长度,会变为斜角
        // 默认为10
    D.矩形:
      rect(x,y,width,height)
        // x,y代表矩形左上角的坐标,width和height以像素计
        // rect()+fill()=fillRect();rect()+strock()=strockRect()
      fillRect()
        // 参数同上,但矩形已经被填充
      strockRect()
        // 参数同上,但只绘制矩形边框
      clearRect()
        // 参数同上,但用于清除某个矩形框
    E.路径:
      fill():填充路径,如果路径未关闭,则会用直线关闭路径
      stroke():绘制路径
      beginPath():开始/重置一条路径
        // 注:以下方法可以创建路径:
          moveTo(),lineTo(),quadricCurveTo(),bezierCurveTo(),arcTo(),arc()
      moveTo(x,y):移动到指定坐标
      closePath():以当前点和起点的直线闭合路径
      lineTo(x,y):以指定坐标和上一次指定的坐标绘制路径
      clip():裁剪,可以搭配save()和restore()一起使用
        // 裁剪上一次绘制的形状,然后将画布限制为那个形状及大小
      quadraticCurveTo(cpx,cpy,x,y):创建二次贝塞尔曲线
        // 以上一次指定的坐标作为开始点,以x,y作为结束点,以cpx,xpy作为控制点的贝塞尔曲线
      bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y):创建三次贝塞尔曲线
        // 该曲线有两个控制点
      arc(x,y,r,sAngle,eAngle,conterlockwise);
        // x,y,r圆点及半径,sAngle:起始角,eAngle:结束角,conterlockwise(可选):false顺时针,true逆时针
      arcTo(x0,y0,x1,y1,r);
        // 起始点坐标-终点坐标-半径
      isPointInPath(x,y);
        // 判断指定点是否在路径中
    F.转换:
      scale(scaleWidth,scaleHeight):缩放
      rotate(angle):旋转,以弧度计
      translate(x,y):设置新的坐标原点
      transform(a,b,c,d,e,f);
        // 参数分别为:水平缩放,水平倾斜,垂直倾斜,垂直缩放,水平移动,垂直移动
      setTransform()
        // 参数同上
    G.文本:
      font:参数与css中的font相同
        // 例如: "italic small-caps bold 12px arial"
      textAlign:"start|end|center|left|right"
        // 规定左右对齐方式,用于配合fillText指定的坐标,start和left似乎效果一样
      textBaseline:"alphabetic|top"hanging|middle|ideographic|bottom"
        // 规定上下对齐方式,fillText指定坐标对应的x轴作为基线
      fillText(text,x,y,maxWidth)
        // x,y为开始绘制文本的坐标,maxWidth为可选项,以像素计算的允许最大文本宽度
      strokeText()
        // 参数同上,无填充
      measureText(text)
        // 返回的对象中包含宽度信息,一般使用 ctx.measureText(text).width来得到宽度
    F.图像:
      drawImage(image,x,y,width,height)
        // 在指定坐标放置图像,width和height可选
      drawImage(image,sx,sy,swidth,sheight,x,y,width,height)
        // 剪切图像,并在画布上定位剪切的部分;width和height可选
    G.像素操作:
      // 通过createImageData()方法得到的ImageData对象的属性:
      width:返回ImageData对象的宽度
      height:返回ImageData对象的高度
      data:返回一个数组,该数组保存了所有像素点的rgba值
        // 像素点i(从0开始)的rgba值保存在[i*4+0,i*4+3]中
        // [0~2]为rgb,[3]为alpha通道,均为0~255之间
      // ctx的方法:
      createImageDate(width,height): 创建一个空数据的ImageData对象
        // 传入的参数也可以是一个imageData,但只会复制尺寸,不会复制图像数据
      getImageData(x,y,width,height): 以起始点和指定长宽获取imageData对象
      putImageData(imageData,x,y): 放置图像的位置
    H.合成:
      globalAlpha:规定当前绘图的透明度,0.0~1.0之间
      globalCompositionOperation:
        // 注: source代表将要绘制的图像,destination代表已经在canvas上的图像
        // 该属性的可选值:
          source-over:默认值,源图像覆盖目标图像
          source-atop:在目标图像中显示源图像,源图像不在其中的部分不可见
          source-in:在目标图像中显示源图像,类似于source-atop,但目标图像不可见
          source-out:显示不在目标图像中的源图像,目标图像不可见
          destination-*:类似于source-*,与其相反
          lighter:显示源图像+目标图像,重叠部分像素会叠加
          copy:只显示源图像,目标图像被忽略
          xor:使用亦或运算组合相交的部分
    G.其他:
      save()
      restore()
        // 以上两个方法都不需要参数,restore()直接回到上一次save()时的状态
      createEvent()
      getContext()
      toDataURL(type,encoderOptions):
        type:图片格式,默认为"image/png",也可以选择"image/jpeg"
        encoderOptions:图片质量,默认为0.92,1为最高
    // 注: 灰度图像 data[i]=data[i+1]=data[i+2]=(data[i]+data[i+1]+data[i+2])/3;
    

@@Day("2019年7月8日")

@@Date("2019年7月8日10:44:11")
@@Topic("slice")
@@Keywords("slice,js,array")
@@Descriptions:
  slice方法从数组中获取其中的一部分,然后组成一个新数组返回,arr.slicee(start,end),其中start和end都代表index,可以为负数,-1代表倒数第一个元素
  如果不指定end,则会从start截取到数组末尾,如果不指定start和end,则会截取数组的全部元素;
  [].slice.apply(arr);实际上是复制arr然后返回一个新数组

@@Date("2019年7月9日")

@@Date("2019年7月9日11:26:51")
@@Topic("jqGrid")
@@Keywords("jqGrid,jqGrid-addon,diy-navbar")
@@Descriptions:
  自定义pagination旁边的navbar时,使用一下代码清除掉jqGrid预先定义的navBar
    $(grid_selector).navGrid(pager_selector,{ edit: false, add: false, del: false, search: false, refresh: false, view: false, position: "left", cloneToTop: false })
  然后再使用:
    $(grid_selector).navButtonAdd(pager_selector,{
            buttonicon: "fa fa-search",
            title: "搜索",
            caption: "搜索",
            position: "last",
            onClickButton: function(){$("#myModal").modal('show');}
    });
  来新增navBar;
  另外, jqGrid-addon提供了filterGrid方法自定义查询,但是会导致原本的search功能失效,filterGrid的使用如下:
    jQuery("#mysearch").jqGrid('filterGrid',grid_selector,{
        gridModel : false,
        filterModel : [{
            label : 'search',
            name: 'searchVal',
            stype: 'text'
        }],
        autosearch : true,
        url : 'url?自己的固定参数'
    })
  
  @@Date("2019年7月9日14:50:03")
  @@Topic("inline-block")
  @@Keywords("js,inline-block,vertical-align")
  @@Descriptions:
    使用 inline-block 可以在某种程度上更改对齐方式

  @@Date("2019年7月9日20:10:52")
  @@Topic("form-horizontal")
  @@Keywords("css,bootstrap,form,form-horizontal")
  @@Descriptions:
    使用form-horizontal时,设置的col需要为col-sm-*,使用col-*时,form-horizontal失效
      
  @@Day("2019年7月11日")
  @@Date("2019年7月11日14:22:40")
  @@Topic("var,ajax")
  @@Keywords("js,var,ajax")
  @@Descriptions:
    js中,使用var声明的变量的configurable属性是false
    js中,ajax请求的 onprogress事件每50ms执行触发一次;
      下载时,触发的是 xhr.onprogress事件; 上传时,触发的是xhr.upload.onprogress事件;
      如果想要在Request中带上cookie,则需要设置xhr.withCredentials为true;
        但是,此时,后端的@CorssOrigin不能设置为"*",而必须设置为请求页面的域名;
      下载完成时,可以通过onloadend事件来进行相应处理
    ajax中的事件:
      https://segmentfault.com/a/1190000004322487
    注:在jQuery中,如果某个元素的id/class名包含以下内容:"[]."则无法直接获取,可以通过原生js或者转义之后再获取;

@@Day("2019年7月12日")
@@Date("2019年7月12日11:41:47")
@@Topic("layui")
@@Keywords("layui,extend,exports,define,use")
@@Descriptions:
  layui的模块化:
    1.在一个单独的js文件中,可以使用 layui.define() 方法定义一个模块,该模块有两个参数:
      a.String/Array: 用于定义依赖,如果没有依赖,可以直接使用参数b;
      b.Function: 用于定义某个模块,该函数可以传入一个默认参数:exports(函数);
        在该函数中,可以定义某个变量,然后通过 exports参数导出这个变量;
        注: exports方法有两个参数: a.导出的类型的名称(必须与文件名相同); b.导出的变量
    2.在配置layui时,可以使用 layui.config({base:'path'})来设定自定义模块的根目录,
        然后再使用 layui.extend({k1:v1,k2:v2...});来定义模块相对于根目录的路径,如果直接位于根目录下,可以不写在extend方法中
        extend方法中的对象,key可以和模块名不一致,但是use时以value对应的模块名为准;(注:value中需要去掉.js后缀)
    3.使用layui.use()加载相应模块;layui.use()的参数和define的参数类似;
      a.需要依赖的组件
      b.加载完成的回调

@@Day("2019年7月15日")
@@Date("2019年7月15日14:27:31")
@@Topic("map,$.map")
@@Keywords("jquery,js,map")
@@Descriptions:
  1.
    在jQuery中,map函数用于通过对某个数组的某些操作,返回一个新的数组;
    (在1.6版本以后,该函数也可以用于遍历对象)
    $.map(arr,callback(item,index));
    item为遍历到的元素,index为遍历到该元素时的索引;
    如果返回值为null或undefined,则该返回值不会加入返回的数组中
  2.
    在js中,map方法为数组的方法,该方法不会对空数组进行检测,也不会改变原始数组;
    arr.map(callback(item,index,arr),thisValue);
    如上,callback需要三个参数,item,index同jquery,arr为数组本身;
    thisValue为遍历数组时,可以作为this使用的对象
    如果返回值为 undefined或者null,或者没有返回值,则返回值中,对应内容的元素为null;

@@Date("2019年7月15日14:45:40")
@@Topic("Csrf")
@@Keywords("java,header,referer,csrf,Interceptor")
@@Descriptions:
  可以通过referer头是否为空,判断是否为csrf攻击;
  通过继承 WebMvcConfigurerAdapter 类,并重写addInterceptors方法,可以向mvc中添加拦截器
  该类为一个配置类,因此需要@Configuration注解
  @Bean
  getInterceptor(){ return new Interceptor(); }
  void addInterceptors(InterceptorRegistry registry){
    registry.addInterceptors(getInterceptor()).addPathPatterns("").excludePathPatterns("","");
  }
  拦截器需要继承 HandlerInterceptorAdaptor类,并重写其中 boolean preHandle(req,resp,handler)等方法;

@@Date("2019年7月15日17:29:10")
@@Topic("popper")
@@Keywords("js,bootstrap,popper")
@@Descriptions:
  popper.js是一个popup的定位引擎;用于对popup进行定位

@@Day("2019年7月23日")
@@Date("2019年7月23日11:46:28")
@@Topic("Promise,setTimeout")
@@Keywords("js,Promise,setTimeout")
@@Descriptions:
  Promise会产生一个microtask,setTimeout会产生一个macrotask,当主线程执行完后,会从microtask队列中抽出任务执行,直到该队列中的任务全部执行完成;
  当microtask队列中执行完成之后,才会执行macrotask队列中的任务;
  整个script代码是一个macrotask，setTimeout会产生一个新的macrotask，Promise对象调用到resolve时会创建一个microtask。
  扩展:
    microAPI: process.nextTick, Promises, Object.observe, MutationObserver
    macroAPI: setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering
  扩展:
    new Promise( function(..){ .. } )模式通常称为revealing constructor。传入的函数会立即执行（不会像then(..)中的回调一样异步延迟;
    即使是立即完成的Promise（类似于new Promise(function(resolve){resolve(42);})）也无法被同步观察到.因此不需要使用setTimeout之类的方法来避免同步调用;
  扩展:
    Promise.resolve() // 该方法为一个静态方法,根据传入的参数不同有不同的返回:
    // 一般而言,该方法用于确保得到的值一定是一个Promise对象;
      1.value(如果不传则为undefined): 返回一个以给定值解析后的promise对象
        // 该value值会作为后续then方法的参数
        // then方法的返回值会作为下一个then方法的参数
      2.thenable: 返回的promise会"跟随"这个thenable对象,采用它的最终状态
        // 实际上是将then方法的第一个参数作为resolve
      3.promise: 返回传入的对象本身
    
    // Promise的构造方法:
      Promise(function(resolve,reject){} /*executor*/ );
      传入的resolve函数的意义在于将promise对象的状态修改为已完成;reject同理;
    
    new Promise(function(){});
    new Promise(function(resolve,reject){ resolve(vlaue); });
      // 该构造方法生成一个Promise;如果该构造方法中,既没有resolve,也没有reject,则会导致返回的Promise处于pending状态
    Promise的race和all方法 都是传入一个Promise数组,race方法在子Promise中有任何一个被解析时,父Promise状态被修改为fulfilled
      all方法在所有子Promise被解析时,父Promise状态被修改为fullfilled;
    Promise的reject方法用于返回一个状态为失败的Promise对象
    Promise的原型有如下方法:
      then(onfulfiled,onrejected);
      catch(onrejected);
      finally(onrejected);

@@Date("2019年7月23日17:17:14")
@@Topic("")
@@Keywords("")
@@Descriptions:
    

Day("2019年7月29日")
@@Date("2019年7月29日10:16:42")
@@Topic("lock")
@@Keywords("java,lock,synchroinzed")
@@Descriptions:
  1. ReentrantLock 和  Condition
    Condition中有await方法和single,singleAll方法,分别相当于Object中的wait,notify和notifyAll
    Condition用于唤醒另一个线程
  2.公平锁和非公平锁
    公平锁在ReentrantLock的构造函数中传入true,非公平锁传入false
    公平锁遵循先进先出的原则,非公平锁线程自由竞争
  3.读写锁ReentrantReadWriteLock
    读写锁表示有两个锁,一个代表读相关的共享锁,一个代表写相关的排他锁
    多个读锁之间不互斥,读锁与写锁互斥,写锁与写锁互斥

@@Date("2019年7月29日10:35:34")
@@Topic("workflow,activi")
@@Keywords("java,activi,mybatis")
@@Descriptions:
  activi是一个工作流引擎,通过对28张表的操作来简化流程中对状态的修改
